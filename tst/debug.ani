// debug.ani -- test file for anic debugging purposes

// basic expression testing
@std;
exp1 = [float\] <- 5;
exp2 = (-7+(-5--++-(-1))*2++-100.0e+10);
exp3 = [int\]; 1 + 2 ++ -- ->exp3;
exp4 = [float\]; 7e-1 - + ->exp4;
exp5 = [string\]; 1.0 + " concatenated to a string" ->exp5;

// basic construct testing
{
	someInt = [int] <- 10;
	someIntLatch = [int\] <- (-5--); \someIntLatch [int x] {x {->std.out; ->std.out;}};
	someFloat = [float\] <- 1;
	someString = [string\] <- false;
	someChar = [char\] <- 'c';
	someChar ?? {
		'a': 1;
		'b': 2
		'c': 3;
		: 4
	} ->someIntLatch;
	someFilter = [int x, string y --> bool\] {
		x + y != "Hi" ? (false) : (\boolSub) -->;
		boolSub = ((1 ^ 1) == 1);
	};
	5, (8 == 9 || (false || true)) someFilter ->std.out;
	1, 2 + , 5 * , 5 % - ++ >> 2 << 1 ->someInt;
	someObj = {
		=[int\ x] {\x ->xStream;}
		xStream = [int\\];
		\\xStream ->std.out;
		toString = [--> string] {someInt == someFloat ? "someObj's string representation" : "garbage string" -->};
	};
	\someObj ->std.out;
	((1 < (2|1)) && (true || false)) ? (4+someInt) : (2-- * someInt++);
	true ? {"Hi" ->std.out};
	false ? {"Bye" ->std.out};
	1 [int x] {x};
	1.0e+100 [float\ f --> string] {\f; "someString" + 'c' + true + " someOtherString" + (7++ - 8--) -->};
};

// standard upcast testing
intBinOp = [int x, int y --> int\] {\std.randInt -->};
+ <->intBinOp;
stringCompOp = [string x, string y --> bool\] {false -->};
== <->stringCompOp;

// object sub-identifier testing
obj = {
	=;
	mem = 1;
	rec = obj;
}
\obj ->obj;
constMemRef = obj.mem;
latchMemRef = [int\] <- \obj.mem;
recObjRef = obj.rec;
recMemRef = obj.rec.mem;
objLatchRef = [obj\] <- \obj;

// self-constructing object testing
selfConsObj = {
	=;
	=[selfConsObj\ self] {};
}
selfConsObjIns = [selfConsObj\];

// basic import testing
impObj = {
	=;
	mem1 = 1;
	mem2 = "Hi";
}
useObj = {
	=[int x] {};
	@impObj.mem1;
	mem = [int] <- mem1;
}

// basic inheritance testing
inhObj = {
	=[int\ initX] {\initX;};
	inhMem = [int\];
}
subObj = {
	=;
	@@[inhObj];
	subMem = [float\];
}

// program termination testing
0 -->; // terminate the program and return status 0
